  - name: create launch-configuration-group 
    ec2_lc:
      name: "{{ lc_swarm_name }}"
      key_name: "{{ key_swarm_name }}"
      security_groups: ['sg-33871c4b']
      instance_type: "{{ type_swarm_node }}"
      image_id: "{{ ami_swarm }}"
      region: "{{ aws_region }}"
      ebs_optimized: "{{ ebs_optimized_swarm }}"
      user_data: |
          #!/bin/sh
          rm /etc/docker/key.json
          rm -rf /var/tmp/aws-mon/
          service docker restart
          cd /opt
          NODE_NAME=$(curl http://169.254.169.254/latest/meta-data/local-hostname) CONSUL_IP=172.21.2.90 NODE_IP=$(curl http://169.254.169.254/latest/meta-data/local-ipv4) docker-compose up -d
      volumes:
          - device_name: /dev/xvdf
            volume_type: "gp2"
            volume_size: "500"
            snapshot_id: "{{ snapshot_docker }}"
      #vpc_subnet_id : "{{ subnet_swarm }}"
      assign_public_ip: yes
      instance_profile_name: "{{ ec2_iam_role }}"
  - name: create asg  
    ec2_asg:
      name: "{{ asg_swarm_name }}"
      load_balancers: [ 'elb-swarm-01']
      availability_zones: [ 'us-east-1a' ]
      launch_config_name: "{{ lc_swarm_name }}" 
      min_size: 2
      max_size: 10
      desired_capacity: 2 
      vpc_zone_identifier: [ 'subnet-5a9d2e70' ]
      region: "{{ aws_region }}"
  - name: create as policy
    ec2_scaling_policy:
      state: present
      region: "{{ aws_region }}"
      name: "asp-lowmemory"
      adjustment_type: "ChangeInCapacity"
      asg_name: "{{ asg_swarm_name }}" 
      scaling_adjustment: 1 
      cooldown: 300 
    register: asp_lowmemory
  - name: print as policy
    debug: var=asp_lowmemory
  - name: create as policy
    ec2_scaling_policy:
      state: present
      region: "{{ aws_region }}"
      name: "asp-highmemory"
      adjustment_type: "ChangeInCapacity"
      asg_name: "{{ asg_swarm_name }}" 
      scaling_adjustment: -1 
      cooldown: 300 
    register: asp
  - name: print as policy
    debug: var=asp
  - name: create alarm
    ec2_metric_alarm:
      state: present
      region: "{{ aws_region }}"
      name: "alarm-lowmemory"
      metric: "MemoryUtilization"
      namespace: "System/Linux"
      statistic: Average
      comparison: ">="
      threshold: 65.0
      period: 60
      evaluation_periods: 2
      #unit: "Percent"
      #description: "This will alarm when a bamboo slave's cpu usage average is lower than 5% for 15 minutes "
      dimensions: {'AutoScalingGroupName':'asg-swarm-01'}
      alarm_actions: ["{{ asp_lowmemory.arn }}"]
